---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/pagespeedonline/v5/runPagespeed?key=&url=https://rubylabs.am
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.googleapis.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Fri, 07 Feb 2020 18:51:22 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "captchaResult": "CAPTCHA_NOT_NEEDED",
  "kind": "pagespeedonline#result",
  "id": "https://rubylabs.am/",
  "loadingExperience": {
    "initial_url": "https://rubylabs.am/"
  },
  "lighthouseResult": {
    "requestedUrl": "https://rubylabs.am/",
    "finalUrl": "https://rubylabs.am/",
    "lighthouseVersion": "5.6.0",
    "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/79.0.3945.120 Safari/537.36",
    "fetchTime": "2020-02-07T18:51:18.077Z",
    "environment": {
      "networkUserAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3694.0 Safari/537.36 Chrome-Lighthouse",
      "hostUserAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/79.0.3945.120 Safari/537.36",
      "benchmarkIndex": 514
    },
    "runWarnings": [],
    "configSettings": {
      "emulatedFormFactor": "desktop",
      "locale": "en-US",
      "onlyCategories": [
        "performance"
      ],
      "channel": "lr"
    },
    "audits": {
      "critical-request-chains": {
        "id": "critical-request-chains",
        "title": "Avoid chaining critical requests",
        "description": "The Critical Request Chains below show you what resources are loaded with a high priority. Consider reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load. [Learn more](https://web.dev/critical-request-chains).",
        "score": null,
        "scoreDisplayMode": "informative",
        "displayValue": "4 chains found",
        "details": {
          "chains": {
            "AC3496A4598668AC366E97480258CA4E": {
              "children": {
                "21.14": {
                  "request": {
                    "url": "https://rubylabs.am/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js",
                    "responseReceivedTime": 2663921.4071569997,
                    "endTime": 2663921.407162,
                    "startTime": 2663921.32391,
                    "transferSize": 1260
                  }
                },
                "21.4": {
                  "request": {
                    "url": "https://rubylabs.am/assets/application-ec865c57acb0588a6a34979772d6828d30904fb0f2008f0e7baf654c628b160f.js",
                    "responseReceivedTime": 2663921.4024509997,
                    "endTime": 2663921.402455,
                    "startTime": 2663921.28203,
                    "transferSize": 97515
                  },
                  "children": {
                    "21.28": {
                      "request": {
                        "endTime": 2663921.544804,
                        "startTime": 2663921.488672,
                        "transferSize": 76240,
                        "url": "https://rubylabs.am/assets/font-awesome/fa-solid-900-3d1080625d3030e88357b3ac9aa377dcec23f1b529c4ad03f7a9a435ccae04be.woff2",
                        "responseReceivedTime": 2663921.544798
                      }
                    },
                    "21.34": {
                      "request": {
                        "startTime": 2663921.488423,
                        "transferSize": 75848,
                        "url": "https://rubylabs.am/assets/font-awesome/fa-brands-400-d3caf12591d194712facd10bca14f0a924edb59c24447a3fd994a48286db8843.woff2",
                        "responseReceivedTime": 2663921.56227,
                        "endTime": 2663921.562273
                      }
                    }
                  }
                },
                "21.3": {
                  "request": {
                    "endTime": 2663921.410769,
                    "startTime": 2663921.281835,
                    "transferSize": 14284,
                    "url": "https://rubylabs.am/assets/application-8c8461c6ea18b3ee66eb1a8d710080fb6ca08a013e30ac3ba68b41859319b0c1.css",
                    "responseReceivedTime": 2663921.410763
                  }
                }
              },
              "request": {
                "url": "https://rubylabs.am/",
                "responseReceivedTime": 2663921.2647390002,
                "endTime": 2663921.264759,
                "startTime": 2663921.116899,
                "transferSize": 3226
              }
            }
          },
          "longestChain": {
            "transferSize": 75848,
            "duration": 445.37399988621473,
            "length": 3
          },
          "type": "criticalrequestchain"
        }
      },
      "dom-size": {
        "id": "dom-size",
        "title": "Avoids an excessive DOM size",
        "description": "A large DOM will increase memory usage, cause longer [style calculations](https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations), and produce costly [layout reflows](https://developers.google.com/speed/articles/reflow). [Learn more](https://web.dev/dom-size).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "37 elements",
        "details": {
          "headings": [
            {
              "key": "statistic",
              "itemType": "text",
              "text": "Statistic"
            },
            {
              "key": "element",
              "itemType": "code",
              "text": "Element"
            },
            {
              "text": "Value",
              "key": "value",
              "itemType": "numeric"
            }
          ],
          "items": [
            {
              "value": "37",
              "statistic": "Total DOM Elements"
            },
            {
              "value": "7",
              "statistic": "Maximum DOM Depth",
              "element": {
                "type": "code",
                "value": "\u003ci class=\"fab fa-linkedin-in\"\u003e"
              }
            },
            {
              "value": "7",
              "element": {
                "type": "code",
                "value": "\u003cdiv class=\"fbottom\"\u003e"
              },
              "statistic": "Maximum Child Elements"
            }
          ],
          "type": "table"
        },
        "numericValue": 37
      },
      "uses-rel-preload": {
        "id": "uses-rel-preload",
        "title": "Preload key requests",
        "description": "Consider using `\u003clink rel=preload\u003e` to prioritize fetching resources that are currently requested later in page load. [Learn more](https://web.dev/uses-rel-preload).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "overallSavingsMs": 0,
          "headings": [],
          "type": "opportunity",
          "items": []
        },
        "numericValue": 0
      },
      "performance-budget": {
        "id": "performance-budget",
        "title": "Performance budget",
        "description": "Keep the quantity and size of network requests under the targets set by the provided performance budget. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/budgets).",
        "score": null,
        "scoreDisplayMode": "notApplicable"
      },
      "unminified-javascript": {
        "id": "unminified-javascript",
        "title": "Minify JavaScript",
        "description": "Minifying JavaScript files can reduce payload sizes and script parse time. [Learn more](https://web.dev/unminified-javascript).",
        "score": 0.93,
        "scoreDisplayMode": "numeric",
        "displayValue": "Potential savings of 39 KB",
        "details": {
          "headings": [
            {
              "label": "URL",
              "key": "url",
              "valueType": "url"
            },
            {
              "label": "Size",
              "key": "totalBytes",
              "valueType": "bytes"
            },
            {
              "key": "wastedBytes",
              "valueType": "bytes",
              "label": "Potential Savings"
            }
          ],
          "items": [
            {
              "url": "https://rubylabs.am/assets/application-ec865c57acb0588a6a34979772d6828d30904fb0f2008f0e7baf654c628b160f.js",
              "totalBytes": 97515,
              "wastedBytes": 40237,
              "wastedPercent": 41.261877919149626
            }
          ],
          "type": "opportunity",
          "overallSavingsBytes": 40237,
          "overallSavingsMs": 80
        },
        "warnings": [],
        "numericValue": 80
      },
      "redirects": {
        "id": "redirects",
        "title": "Avoid multiple page redirects",
        "description": "Redirects introduce additional delays before the page can be loaded. [Learn more](https://web.dev/redirects).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "headings": [],
          "type": "opportunity",
          "items": [],
          "overallSavingsMs": 0
        },
        "numericValue": 0
      },
      "user-timings": {
        "id": "user-timings",
        "title": "User Timing marks and measures",
        "description": "Consider instrumenting your app with the User Timing API to measure your app's real-world performance during key user experiences. [Learn more](https://web.dev/user-timings).",
        "score": null,
        "scoreDisplayMode": "notApplicable",
        "details": {
          "headings": [],
          "items": [],
          "type": "table"
        }
      },
      "first-meaningful-paint": {
        "id": "first-meaningful-paint",
        "title": "First Meaningful Paint",
        "description": "First Meaningful Paint measures when the primary content of a page is visible. [Learn more](https://web.dev/first-meaningful-paint).",
        "score": 0.98,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.7 s",
        "numericValue": 658
      },
      "resource-summary": {
        "id": "resource-summary",
        "title": "Keep request counts low and transfer sizes small",
        "description": "To set budgets for the quantity and size of page resources, add a budget.json file. [Learn more](https://developers.google.com/web/tools/lighthouse/audits/budgets).",
        "score": null,
        "scoreDisplayMode": "informative",
        "displayValue": "18 requests • 340 KB",
        "details": {
          "type": "table",
          "items": [
            {
              "resourceType": "total",
              "label": "Total",
              "size": 347852,
              "requestCount": 18
            },
            {
              "resourceType": "font",
              "label": "Font",
              "size": 152088,
              "requestCount": 2
            },
            {
              "resourceType": "script",
              "label": "Script",
              "size": 146398,
              "requestCount": 4
            },
            {
              "resourceType": "image",
              "label": "Image",
              "size": 31856,
              "requestCount": 10
            },
            {
              "resourceType": "stylesheet",
              "label": "Stylesheet",
              "size": 14284,
              "requestCount": 1
            },
            {
              "requestCount": 1,
              "resourceType": "document",
              "label": "Document",
              "size": 3226
            },
            {
              "label": "Media",
              "size": 0,
              "requestCount": 0,
              "resourceType": "media"
            },
            {
              "resourceType": "other",
              "label": "Other",
              "size": 0,
              "requestCount": 0
            },
            {
              "requestCount": 3,
              "resourceType": "third-party",
              "label": "Third-party",
              "size": 48176
            }
          ],
          "headings": [
            {
              "itemType": "text",
              "key": "label",
              "text": "Resource Type"
            },
            {
              "text": "Requests",
              "key": "requestCount",
              "itemType": "numeric"
            },
            {
              "key": "size",
              "itemType": "bytes",
              "text": "Transfer Size"
            }
          ]
        }
      },
      "final-screenshot": {
        "id": "final-screenshot",
        "title": "Final Screenshot",
        "description": "The last screenshot captured of the pageload.",
        "score": null,
        "scoreDisplayMode": "informative",
        "details": {
          "type": "screenshot",
          "timing": 557,
          "timestamp": 2663921672204,
          "data": "data:image/jpeg;base64,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"
        }
      },
      "efficient-animated-content": {
        "id": "efficient-animated-content",
        "title": "Use video formats for animated content",
        "description": "Large GIFs are inefficient for delivering animated content. Consider using MPEG4/WebM videos for animations and PNG/WebP for static images instead of GIF to save network bytes. [Learn more](https://web.dev/efficient-animated-content)",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "headings": [],
          "items": [],
          "type": "opportunity",
          "overallSavingsBytes": 0,
          "overallSavingsMs": 0
        },
        "numericValue": 0
      },
      "metrics": {
        "id": "metrics",
        "title": "Metrics",
        "description": "Collects all available metrics.",
        "score": null,
        "scoreDisplayMode": "informative",
        "details": {
          "type": "debugdata",
          "items": [
            {
              "observedLoad": 509,
              "observedLastVisualChangeTs": 2663921671599,
              "observedLargestContentfulPaint": 454,
              "observedDomContentLoadedTs": 2663921526114,
              "observedSpeedIndex": 426,
              "estimatedInputLatency": 13,
              "totalBlockingTime": 0,
              "observedFirstPaint": 454,
              "observedLastVisualChange": 556,
              "firstContentfulPaint": 658,
              "observedFirstPaintTs": 2663921569780,
              "speedIndex": 658,
              "observedSpeedIndexTs": 2663921541543,
              "observedFirstContentfulPaint": 454,
              "observedNavigationStartTs": 2663921115599,
              "observedLargestContentfulPaintTs": 2663921569780,
              "observedFirstVisualChange": 423,
              "observedLoadTs": 2663921624556,
              "firstMeaningfulPaint": 658,
              "observedFirstMeaningfulPaint": 454,
              "observedTraceEnd": 1569,
              "firstCPUIdle": 658,
              "observedTraceEndTs": 2663922684871,
              "observedFirstMeaningfulPaintTs": 2663921569780,
              "observedDomContentLoaded": 411,
              "observedFirstVisualChangeTs": 2663921538599,
              "interactive": 673,
              "observedNavigationStart": 0,
              "observedFirstContentfulPaintTs": 2663921569780
            },
            {
              "lcpInvalidated": false
            }
          ]
        },
        "numericValue": 673
      },
      "time-to-first-byte": {
        "id": "time-to-first-byte",
        "title": "Server response times are low (TTFB)",
        "description": "Time To First Byte identifies the time at which your server sends a response. [Learn more](https://web.dev/time-to-first-byte).",
        "score": 1,
        "scoreDisplayMode": "binary",
        "displayValue": "Root document took 150 ms",
        "details": {
          "overallSavingsMs": -451.15999999999997,
          "headings": [],
          "type": "opportunity",
          "items": []
        },
        "numericValue": 148.84
      },
      "render-blocking-resources": {
        "id": "render-blocking-resources",
        "title": "Eliminate render-blocking resources",
        "description": "Resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles. [Learn more](https://web.dev/render-blocking-resources).",
        "score": 0.73,
        "scoreDisplayMode": "numeric",
        "displayValue": "Potential savings of 340 ms",
        "details": {
          "headings": [
            {
              "key": "url",
              "valueType": "url",
              "label": "URL"
            },
            {
              "key": "totalBytes",
              "valueType": "bytes",
              "label": "Size"
            },
            {
              "key": "wastedMs",
              "valueType": "timespanMs",
              "label": "Potential Savings"
            }
          ],
          "items": [
            {
              "totalBytes": 14284,
              "wastedMs": 70,
              "url": "https://rubylabs.am/assets/application-8c8461c6ea18b3ee66eb1a8d710080fb6ca08a013e30ac3ba68b41859319b0c1.css"
            },
            {
              "totalBytes": 97515,
              "wastedMs": 190,
              "url": "https://rubylabs.am/assets/application-ec865c57acb0588a6a34979772d6828d30904fb0f2008f0e7baf654c628b160f.js"
            }
          ],
          "type": "opportunity",
          "overallSavingsMs": 336
        },
        "numericValue": 336
      },
      "uses-text-compression": {
        "id": "uses-text-compression",
        "title": "Enable text compression",
        "description": "Text-based resources should be served with compression (gzip, deflate or brotli) to minimize total network bytes. [Learn more](https://web.dev/uses-text-compression).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "overallSavingsMs": 0,
          "headings": [],
          "items": [],
          "type": "opportunity",
          "overallSavingsBytes": 0
        },
        "numericValue": 0
      },
      "uses-optimized-images": {
        "id": "uses-optimized-images",
        "title": "Efficiently encode images",
        "description": "Optimized images load faster and consume less cellular data. [Learn more](https://web.dev/uses-optimized-images).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "overallSavingsMs": 0,
          "headings": [],
          "type": "opportunity",
          "items": [],
          "overallSavingsBytes": 0
        },
        "warnings": [],
        "numericValue": 0
      },
      "network-requests": {
        "id": "network-requests",
        "title": "Network Requests",
        "description": "Lists the network requests that were made during page load.",
        "score": null,
        "scoreDisplayMode": "informative",
        "details": {
          "headings": [
            {
              "text": "URL",
              "key": "url",
              "itemType": "url"
            },
            {
              "text": "Start Time",
              "granularity": 1,
              "key": "startTime",
              "itemType": "ms"
            },
            {
              "text": "End Time",
              "granularity": 1,
              "key": "endTime",
              "itemType": "ms"
            },
            {
              "itemType": "bytes",
              "key": "transferSize",
              "text": "Transfer Size",
              "displayUnit": "kb",
              "granularity": 1
            },
            {
              "key": "resourceSize",
              "itemType": "bytes",
              "text": "Resource Size",
              "displayUnit": "kb",
              "granularity": 1
            },
            {
              "key": "statusCode",
              "itemType": "text",
              "text": "Status Code"
            },
            {
              "key": "mimeType",
              "itemType": "text",
              "text": "MIME Type"
            },
            {
              "text": "Resource Type",
              "key": "resourceType",
              "itemType": "text"
            }
          ],
          "type": "table",
          "items": [
            {
              "transferSize": 3226,
              "statusCode": 200,
              "url": "https://rubylabs.am/",
              "resourceType": "Document",
              "mimeType": "text/html",
              "endTime": 147.859999909997,
              "resourceSize": 4115,
              "startTime": 0
            },
            {
              "resourceType": "Script",
              "mimeType": "application/javascript",
              "resourceSize": 75993,
              "endTime": 197.61699996888638,
              "startTime": 164.61300011724234,
              "transferSize": 29104,
              "statusCode": 200,
              "url": "https://www.googletagmanager.com/gtag/js?id=UA-141018178-1"
            },
            {
              "resourceSize": 62861,
              "endTime": 293.87000016868114,
              "startTime": 164.93600001558661,
              "transferSize": 14284,
              "url": "https://rubylabs.am/assets/application-8c8461c6ea18b3ee66eb1a8d710080fb6ca08a013e30ac3ba68b41859319b0c1.css",
              "statusCode": 200,
              "resourceType": "Stylesheet",
              "mimeType": "text/css"
            },
            {
              "resourceType": "Script",
              "mimeType": "application/javascript",
              "resourceSize": 372541,
              "endTime": 285.55600019171834,
              "startTime": 165.13099987059832,
              "transferSize": 97515,
              "url": "https://rubylabs.am/assets/application-ec865c57acb0588a6a34979772d6828d30904fb0f2008f0e7baf654c628b160f.js",
              "statusCode": 200
            },
            {
              "resourceType": "Image",
              "mimeType": "image/png",
              "endTime": 272.72900007665157,
              "resourceSize": 7111,
              "startTime": 165.49499984830618,
              "transferSize": 7606,
              "url": "https://rubylabs.am/assets/rl/red-160x130-569c48171f3b58bdb104bc8285e01f1ef44bbaa13550b58ad6b94c9fb0210ef4.png",
              "statusCode": 200
            },
            {
              "statusCode": 200,
              "url": "https://rubylabs.am/assets/logos/jquery-white-4ef546afc21e2f89521db81967a6214921251cf6505ee99e0d066bb9e0bedc26.png",
              "resourceType": "Image",
              "mimeType": "image/png",
              "endTime": 303.11999982222915,
              "resourceSize": 1451,
              "startTime": 274.26500013098121,
              "transferSize": 1947
            },
            {
              "resourceSize": 4405,
              "endTime": 321.49400003254414,
              "startTime": 291.96299985051155,
              "transferSize": 4901,
              "url": "https://rubylabs.am/assets/logos/reactjs-white-d69d7da03f5945194754588f8194162fd7bd47f262a401ea6596c0dadae5a738.png",
              "statusCode": 200,
              "resourceType": "Image",
              "mimeType": "image/png"
            },
            {
              "resourceType": "Image",
              "mimeType": "image/png",
              "endTime": 333.19600019603968,
              "resourceSize": 661,
              "startTime": 304.3630002066493,
              "transferSize": 1156,
              "url": "https://rubylabs.am/assets/logos/css-white-9e7713f7255070c14aca2b14b55a1ec4b2edc0e75c1761703169b9c35e16aeeb.png",
              "statusCode": 200
            },
            {
              "resourceType": "Image",
              "mimeType": "image/png",
              "endTime": 443.40500002726912,
              "resourceSize": 523,
              "startTime": 359.1499999165535,
              "transferSize": 1018,
              "statusCode": 200,
              "url": "https://rubylabs.am/assets/logos/html-white-88a57c31735941ce79c1b37bccb62b5e0a893c48967857ab19f588d32534bcb6.png"
            },
            {
              "mimeType": "image/png",
              "resourceSize": 1433,
              "endTime": 440.34700002521276,
              "startTime": 359.33399992063642,
              "transferSize": 1928,
              "url": "https://rubylabs.am/assets/logos/bootstrap-white-ba6af6f36f311e56aa2e02057b4c951fa7c13814310b1d66f486b5b732fb18b0.png",
              "statusCode": 200,
              "resourceType": "Image"
            },
            {
              "resourceType": "Image",
              "mimeType": "image/png",
              "resourceSize": 3610,
              "endTime": 397.12999993935227,
              "startTime": 359.49299996718764,
              "transferSize": 4106,
              "url": "https://rubylabs.am/assets/logos/sass-white-03099be0d6b2db9bb2a09a683447beb413e88826c500489ae49c9b0fd560a4f6.png",
              "statusCode": 200
            },
            {
              "resourceType": "Image",
              "mimeType": "image/png",
              "endTime": 503.54599999263883,
              "resourceSize": 2876,
              "startTime": 359.72699988633394,
              "transferSize": 3372,
              "statusCode": 200,
              "url": "https://rubylabs.am/assets/logos/js-white-73230efe4efc10eccd9a84bb20f11357271b3704f83d31d4ae25d597434fc22b.png"
            },
            {
              "endTime": 455.30200004577637,
              "resourceSize": 4773,
              "startTime": 360.36199983209372,
              "transferSize": 5269,
              "url": "https://rubylabs.am/assets/logos/rails-white-cd457b5d65f676aaac06707c5d1b2a741ebe67e3ebe586ab973aef28ec2b7ce1.png",
              "statusCode": 200,
              "resourceType": "Image",
              "mimeType": "image/png"
            },
            {
              "resourceType": "Script",
              "mimeType": "application/javascript",
              "resourceSize": 1239,
              "endTime": 290.26299994438887,
              "startTime": 207.01099978759885,
              "transferSize": 1260,
              "statusCode": 200,
              "url": "https://rubylabs.am/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"
            },
            {
              "transferSize": 18519,
              "url": "https://www.google-analytics.com/analytics.js",
              "statusCode": 200,
              "resourceType": "Script",
              "mimeType": "text/javascript",
              "resourceSize": 44788,
              "endTime": 373.12899995595217,
              "startTime": 360.51699984818697
            },
            {
              "mimeType": "application/octet-stream",
              "endTime": 445.37399988621473,
              "resourceSize": 75336,
              "startTime": 371.52400007471442,
              "transferSize": 75848,
              "statusCode": 200,
              "url": "https://rubylabs.am/assets/font-awesome/fa-brands-400-d3caf12591d194712facd10bca14f0a924edb59c24447a3fd994a48286db8843.woff2",
              "resourceType": "Font"
            },
            {
              "mimeType": "application/octet-stream",
              "resourceSize": 75728,
              "endTime": 427.90499981492758,
              "startTime": 371.77299987524748,
              "transferSize": 76240,
              "url": "https://rubylabs.am/assets/font-awesome/fa-solid-900-3d1080625d3030e88357b3ac9aa377dcec23f1b529c4ad03f7a9a435ccae04be.woff2",
              "statusCode": 200,
              "resourceType": "Font"
            },
            {
              "transferSize": 553,
              "url": "https://www.google-analytics.com/r/collect?v=1&_v=j80&a=1263597337&t=pageview&_s=1&dl=https%3A%2F%2Frubylabs.am%2F&ul=en-us&de=UTF-8&dt=RubyLabs%20LLC&sd=24-bit&sr=800x600&vp=1350x940&je=0&_u=IEBAAUAB~&jid=136973976&gjid=309870754&cid=1210777771.1581101479&tid=UA-141018178-1&_gid=265532857.1581101479&_r=1&gtm=2ou1t0&z=1248170411",
              "statusCode": 200,
              "resourceType": "Image",
              "mimeType": "image/gif",
              "endTime": 474.65700004249811,
              "resourceSize": 35,
              "startTime": 464.33999994769692
            }
          ]
        },
        "numericValue": 18
      },
      "uses-long-cache-ttl": {
        "id": "uses-long-cache-ttl",
        "title": "Uses efficient cache policy on static assets",
        "description": "A long cache lifetime can speed up repeat visits to your page. [Learn more](https://web.dev/uses-long-cache-ttl).",
        "score": 0.97,
        "scoreDisplayMode": "numeric",
        "displayValue": "2 resources found",
        "details": {
          "summary": {
            "wastedBytes": 14267.25
          },
          "headings": [
            {
              "key": "url",
              "itemType": "url",
              "text": "URL"
            },
            {
              "key": "cacheLifetimeMs",
              "itemType": "ms",
              "text": "Cache TTL",
              "displayUnit": "duration"
            },
            {
              "key": "totalBytes",
              "itemType": "bytes",
              "text": "Size",
              "displayUnit": "kb",
              "granularity": 1
            }
          ],
          "type": "table",
          "items": [
            {
              "url": "https://www.google-analytics.com/analytics.js",
              "wastedBytes": 13889.25,
              "debugData": {
                "type": "debugdata",
                "max-age": 7200,
                "public": true
              },
              "cacheLifetimeMs": 7200000,
              "totalBytes": 18519,
              "cacheHitProbability": 0.25
            },
            {
              "debugData": {
                "public": true,
                "max-age": 172800,
                "type": "debugdata"
              },
              "cacheLifetimeMs": 172800000,
              "totalBytes": 1260,
              "cacheHitProbability": 0.7,
              "url": "https://rubylabs.am/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js",
              "wastedBytes": 378.00000000000006
            }
          ]
        },
        "numericValue": 14267.25
      },
      "max-potential-fid": {
        "id": "max-potential-fid",
        "title": "Max Potential First Input Delay",
        "description": "The maximum potential First Input Delay that your users could experience is the duration, in milliseconds, of the longest task. [Learn more](https://developers.google.com/web/updates/2018/05/first-input-delay).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "50 ms",
        "numericValue": 49.5
      },
      "interactive": {
        "id": "interactive",
        "title": "Time to Interactive",
        "description": "Time to interactive is the amount of time it takes for the page to become fully interactive. [Learn more](https://web.dev/interactive).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.7 s",
        "numericValue": 673
      },
      "screenshot-thumbnails": {
        "id": "screenshot-thumbnails",
        "title": "Screenshot Thumbnails",
        "description": "This is what the load of your site looked like.",
        "score": null,
        "scoreDisplayMode": "informative",
        "details": {
          "type": "filmstrip",
          "items": [
            {
              "timestamp": 2663921415599,
              "data": "data:image/jpeg;base64,/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRQBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/AABEIAFMAeAMBEQACEQEDEQH/xAGiAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP1ToAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgD//Z",
              "timing": 300
            },
            {
              "timing": 600,
              "timestamp": 2663921715599,
              "data": "data:image/jpeg;base64,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"
            },
            {
              "timestamp": 2663922015599,
              "data": "data:image/jpeg;base64,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",
              "timing": 900
            },
            {
              "timing": 1200,
              "timestamp": 2663922315599,
              "data": "data:image/jpeg;base64,/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRQBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/AABEIAFMAeAMBEQACEQEDEQH/xAGiAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP0VrrOQKACgAoAKACgAoGef6z8atH064v49O03WfFKafcNZXknh2yN6Le5XaWhYId28BwWAHy9GweK86WOgpSjCLk1vaz/U+ioZJVqRhKrUjTU9Vzcy0735bW872etnozovCPiSfxTbXl4+lXemWQuPLsmvopIJrmIRpukaGRVkiIlMqbXUEiMMPlcV0Uavtk5pWXTz/wAtbr5Hm43CwwUoU+dSnb3rNNJtuyUk2n7qi77e81ujerpPOCgAoAKACgAoAKACgAoAKACgAoAyPFmi3fiLQrjTbPVJNHknaNZLqBSZBF5imVFIKlGeMOgdSGQuGU5UVlVhKcHGEuV9/wDLs+z6bnbhKtPD1VVqw50r6dL9G9HdJ2bXW1rmF4m+H7XkWm2/h+4h8NW8Vumn3X2CExl7BG4tkEbJ5ZAZ/LkBzESdow7VzVaDUV7F8vR+nZdrdO2ulzuw+Pg5uWNvUd3JXeim7atdU7LmjvJJXeiUtHwH4Mh8B6ENLt9Sv9TtxIZI2vymYlIAEcaRoiRxqFAWNEVV7CumnTVJWTb+77lZLQ4cTini5KbhGLtry317uTlKTbfXXc6OtTiCgAoAKACgAoAKACgAoAKACgAoAy9c8N2niBAtzNfwELt3WV/NbHGc/wDLNl9/zpp2JcbszH+H9i1lFaLqOuJBEJtu3WrzefNUg7n83c23OVyfkP3ccU+YOVG3aaWtpd3dwLi5ma5k81kmmLojbET5AfuLtQfKuBksxBZiSr3BRsXKRQUAFABQAUAFABQAUAanh9DLLcoJGhdosLImNyn1GQRx7gj2NZT2NYFi703UdRmDxaxqulKitGYkitWEmCw8wFo3wTweTjH8IOcZF28yGTSNTmjiiGta3AY1EjTKlkTISQNjZjIyu0n5QB855PAAIik0TVUliYeIdfkUckJHYBW6nBzCD/CBx/fHuQDJTpGqST4/tvWURjJjEdniPJO3/lnyAMbevA+fJoAZNYapfXSlNT1ywjdHBRUsiiHzd46ozZ2gIOo2Hn5/mAKxraZptxbz/aJtTvp0eML9kuRDtQ5+9lEDZ7feI9qCkjTwPWlYYYHrRYAwPWiwGF4qA8q15/jP8q1p9TOZgVsYhQAUAFADZIUlxvRXx0yM0AM+yQf88k/KgA+yQf8APJPyoAPskH/PJPyoAPskH/PJPyoAPskH/PJPyoAPskH/ADyT8qAD7JB/zyT8qAD7JB/zyT8qAD7JB/zyT8qAFS3ijJKIqk9SBQMkoEFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAYvjTxEvhPwnq2sMYg1nbPLGJmwjyY+RD/vNtXjnmubE1lh6E6r+ym/8AL8bHo5fhHjsXSwy+3KK9E3q/l+V2bVdJ5wUAFABQAUAFABQAUAFABQAUAFABQAUAeMftTeJf7M8DWulRyhZtTuQHQoTuijw7EHoCH8r6gn3x8rxFiPZYVUlvN/gtf8j9N8P8E8RmrxGtqcW7rvJOKXzTk/kez19UfmQUAFABQAUAZPip79NFlXS76HTb+Rkjhubiye8RCWAJMSOhPBPO4BfvHgGhCex5Vfa54gn1XRHi+LOnWtsiu1xbxeGtwu9hfdvZpT5eQBgDGSpxndgVp2I17nTHXrqd/BuoR+MJf7Ptkmj1ZItDcx6lILbfukbaTabSrPgkZLKmSSATdbFN7Ghofj/R7TTJjfeJY9WkFzcMJltWjZY2uHMcWxRz5aMkZbGT5ZZsZOE99Aulo2dZpupW2r2MV5aSedbSglH2kZwSDweeoNIos0AFABQAUAfMX7QVrrXj3x9c6do9ldX8Ph+xVriGMKdjOPMZ1UHc2VMY6dVAxyM/nefuri8UqNKN1TV389f0R+98EvC5Rln1nFzUHWnZN7NLReS1c+2l3sj6d7kYORnP4da/R1Fs/B+VjXmSJWLsFC8kscAVndL4tCNGrpmVL4v0KCOWSXWtOjjiLCR3u4wEKlFYE54wZIwc9C6+ornliKcFeUkvmjqo4TE4hqNKlJt9En1Ta++zt3s2tNR0PizQ7ma3ih1rTpZLgAwql3GTICxQFRnn5lZeO6kdRTWIoydlNfeupq8BjIqUp0ZJRve8XpZJu7tbRNP0JLjxBaW0mxlupPkMga3tJZlKhC/BRSOg4HUnAHJAI69Po7+ib8+nlcz+q19nGzvbXTql121fXzvsc34t8X+Gho0dxrN1qum2aOJg8cd7ZvlQp5MYViv7wfKeDhsg7Gxm8ZSi2nf/AMBl69jopZbWxFuSUen24Le9vtabap6q6va5DZ/FT4e3Ik8vxrpKAl1YzaxsxltrYDOMfdOCOgOVwCDWax+H0akvnp1t1t/XqdKyPMGr+xlbutVsn0v3t5O6eqaVK7+LXgSwghEfiOyu0tPnQReIISZMKzbW3XALgkBfmzyy9FBIylmVFR5lZr1j/wDJHRHh7Gv4ota/y1O6V9IPTW/on1snxGq/tN/DSylDPea7LOY3jKWlxM6qGjTOCs2wnkqGGcMjkEZDNhLN6Edlf7u3r309Tup8LY+ekEn8prq094rZa3vZ6ddF0Oh/tIeAL69GmaXqd/d3hdlW3ks72eVtrHdgCN2OFBbBwcAZxyRX9r0L2jb8f0j/AFsV/qtj4rnqxsl5wt36zXXT06X0KcH7Uvhi6067u4rm0lS2ALvCt+8aAh8b2+xgLlggGf7zH+EBsHnNNptRTt25v/kF5HSuFZuUYScot7X5NV7t/wDl7r9p/clbmbjgXX7aXhu1aNxo2pXNnu8uS8tV3xq5jUhRv2dW8wc7cqgbqSq4f20nHm5dO9rrp5rr/wADqdf+plZSt7WLd9m7O15dEn0XTrzLZJuWX9rXTIrRNW/s3V/7HkOFKaZC7oRIu7zCLz5QVO1dyjLEsMhStDzdRjzJO3+Ff/Jdt/PUujwlG7w8pJzWulR9V50r72drvRcvXmWF4i/a9vtO0DTtRstH89LxGlikvLUWqyokkiSMqrcSHg+WOTxsc8hvkx/tetyc/Jp936vy/pnV/qng/aug6jUr7X5ntF/yp7J7JfEtmve8yufjU3jXQPEFhc2aLfarqUWpNcRzFZE2BlWFuD5kShvlA2lSMknOK+RxOLqyhVjUXxy5r9dOnmvkfqeX5PhqVfC16NRp0YOHLbS73ktdHe93rzaLTc4a5+Nni64gggN5YRxwuvlCHSLOMxFSzKUKxAqQXcgjGCzHua1lj67Wtv8AwGP+XmeO8nwkIpJSs7/bn1tf7XWy+5dkYlv498S2l351v4h1S2lKhN0F5JGdqqFVflI4CgADsAB2qvbTu7O3pp5dPLQ9OpgqDSUo81237zctb3v7zet9fXUun4v+Oycnxp4hJ/7Ck/8A8VWixeIW1SX3s45ZVl8viw8H/wBux/yMHV/EOqa/KJdU1G61KUdHu5mlYfixNZyrVZ/FJv5m0MDhKTvTpRXpFL9CjvPHt7VidiilsAcgYHA9MU7tFLR3W5Y02NbjUrSKRQySTxo46ZBYA/pTiruzJk7Rdi9JZQhtQwn+qE2zk8YIx/OuhwSOWE5SkmyrqN1PIttFJNJJFDEqxpI5YICoJCg9Bkk8etYSbvudbhHmbsOHiDVF1hNWGo3Q1VJBMt8Jm89XHRg+dwIwMHOeKOeSfNfUx9hS5PZci5bWtbS3a3YZb6zf2mn3ljBe3ENje7DdW0chWOfYdyb1HDbSSRnOCeKXPKzV9y504VJqpNJyWze6vuH9s3/9lf2X9tuP7N8/7T9j8w+T5u3b5mzpu28bsZxxT55W5b6A6cHP2jS5rWv1t2v2KwnkEIi3nygchP4c+uPxP51N3axXKk72G72CkZ4JyR60XdrCcIuXO1r36ipK8bhlO1gcgjgg1NrmibTumf/Z"
            },
            {
              "timing": 1500,
              "timestamp": 2663922615599,
              "data": "data:image/jpeg;base64,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"
            },
            {
              "timing": 1800,
              "timestamp": 2663922915599,
              "data": "data:image/jpeg;base64,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"
            },
            {
              "timing": 2100,
              "timestamp": 2663923215599,
              "data": "data:image/jpeg;base64,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"
            },
            {
              "timing": 2400,
              "timestamp": 2663923515599,
              "data": "data:image/jpeg;base64,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"
            },
            {
              "timing": 2700,
              "timestamp": 2663923815599,
              "data": "data:image/jpeg;base64,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"
            },
            {
              "timing": 3000,
              "timestamp": 2663924115599,
              "data": "data:image/jpeg;base64,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"
            }
          ],
          "scale": 3000
        }
      },
      "third-party-summary": {
        "id": "third-party-summary",
        "title": "Minimize third-party usage",
        "description": "Third-party code can significantly impact load performance. Limit the number of redundant third-party providers and try to load third-party code after your page has primarily finished loading. [Learn more](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript/).",
        "score": 1,
        "scoreDisplayMode": "binary",
        "displayValue": "Third-party code blocked the main thread for 0 ms",
        "details": {
          "summary": {
            "wastedMs": 0,
            "wastedBytes": 48176
          },
          "headings": [
            {
              "key": "entity",
              "itemType": "link",
              "text": "Third-Party"
            },
            {
              "key": "transferSize",
              "itemType": "bytes",
              "text": "Size",
              "granularity": 1
            },
            {
              "text": "Main-Thread Blocking Time",
              "granularity": 1,
              "key": "blockingTime",
              "itemType": "ms"
            }
          ],
          "type": "table",
          "items": [
            {
              "blockingTime": 0,
              "entity": {
                "url": "https://marketingplatform.google.com/about/tag-manager/",
                "type": "link",
                "text": "Google Tag Manager"
              },
              "mainThreadTime": 28.436000000000007,
              "transferSize": 29104
            },
            {
              "mainThreadTime": 41.891,
              "transferSize": 19072,
              "blockingTime": 0,
              "entity": {
                "type": "link",
                "text": "Google Analytics",
                "url": "https://www.google.com/analytics/analytics/"
              }
            }
          ]
        }
      },
      "network-rtt": {
        "id": "network-rtt",
        "title": "Network Round Trip Times",
        "description": "Network round trip times (RTT) have a large impact on performance. If the RTT to an origin is high, it's an indication that servers closer to the user could improve performance. [Learn more](https://hpbn.co/primer-on-latency-and-bandwidth/).",
        "score": null,
        "scoreDisplayMode": "informative",
        "displayValue": "0 ms",
        "details": {
          "headings": [],
          "type": "table",
          "items": []
        },
        "numericValue": 0
      },
      "main-thread-tasks": {
        "id": "main-thread-tasks",
        "title": "Tasks",
        "description": "Lists the toplevel main thread tasks that executed during page load.",
        "score": null,
        "scoreDisplayMode": "informative",
        "details": {
          "items": [
            {
              "startTime": 180.17,
              "duration": 10.545
            },
            {
              "startTime": 192.492,
              "duration": 5.279
            },
            {
              "startTime": 236.344,
              "duration": 7.844
            },
            {
              "startTime": 244.693,
              "duration": 17.662
            },
            {
              "duration": 7.739,
              "startTime": 322.984
            },
            {
              "duration": 55.503,
              "startTime": 334.495
            },
            {
              "duration": 39.444,
              "startTime": 392.031
            },
            {
              "startTime": 431.843,
              "duration": 6.828
            },
            {
              "startTime": 442.557,
              "duration": 5.75
            },
            {
              "startTime": 450.794,
              "duration": 42.699
            },
            {
              "startTime": 506.9,
              "duration": 9.67
            },
            {
              "startTime": 516.671,
              "duration": 7.861
            },
            {
              "duration": 6.666,
              "startTime": 527.625
            }
          ],
          "type": "table",
          "headings": [
            {
              "key": "startTime",
              "itemType": "ms",
              "text": "Start Time",
              "granularity": 1
            },
            {
              "text": "End Time",
              "granularity": 1,
              "itemType": "ms",
              "key": "duration"
            }
          ]
        },
        "numericValue": 13
      },
      "font-display": {
        "id": "font-display",
        "title": "Ensure text remains visible during webfont load",
        "description": "Leverage the font-display CSS feature to ensure text is user-visible while webfonts are loading. [Learn more](https://web.dev/font-display).",
        "score": 0,
        "scoreDisplayMode": "binary",
        "details": {
          "items": [
            {
              "url": "https://rubylabs.am/assets/font-awesome/fa-brands-400-d3caf12591d194712facd10bca14f0a924edb59c24447a3fd994a48286db8843.woff2",
              "wastedMs": 73.849999811500311
            },
            {
              "wastedMs": 56.1319999396801,
              "url": "https://rubylabs.am/assets/font-awesome/fa-solid-900-3d1080625d3030e88357b3ac9aa377dcec23f1b529c4ad03f7a9a435ccae04be.woff2"
            }
          ],
          "type": "table",
          "headings": [
            {
              "itemType": "url",
              "key": "url",
              "text": "URL"
            },
            {
              "text": "Potential Savings",
              "key": "wastedMs",
              "itemType": "ms"
            }
          ]
        },
        "warnings": []
      },
      "total-blocking-time": {
        "id": "total-blocking-time",
        "title": "Total Blocking Time",
        "description": "Sum of all time periods between FCP and Time to Interactive, when task length exceeded 50ms, expressed in milliseconds.",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "0 ms",
        "numericValue": 0
      },
      "estimated-input-latency": {
        "id": "estimated-input-latency",
        "title": "Estimated Input Latency",
        "description": "Estimated Input Latency is an estimate of how long your app takes to respond to user input, in milliseconds, during the busiest 5s window of page load. If your latency is higher than 50 ms, users may perceive your app as laggy. [Learn more](https://web.dev/estimated-input-latency).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "10 ms",
        "numericValue": 12.8
      },
      "uses-rel-preconnect": {
        "id": "uses-rel-preconnect",
        "title": "Preconnect to required origins",
        "description": "Consider adding `preconnect` or `dns-prefetch` resource hints to establish early connections to important third-party origins. [Learn more](https://web.dev/uses-rel-preconnect).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "type": "opportunity",
          "items": [],
          "overallSavingsMs": 0,
          "headings": []
        },
        "warnings": [],
        "numericValue": 0
      },
      "bootup-time": {
        "id": "bootup-time",
        "title": "JavaScript execution time",
        "description": "Consider reducing the time spent parsing, compiling, and executing JS. You may find delivering smaller JS payloads helps with this. [Learn more](https://web.dev/bootup-time).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.1 s",
        "details": {
          "type": "table",
          "items": [
            {
              "url": "Other",
              "total": 105.58400000000003,
              "scripting": 5.7399999999999975,
              "scriptParseCompile": 1.29
            },
            {
              "url": "https://rubylabs.am/assets/application-ec865c57acb0588a6a34979772d6828d30904fb0f2008f0e7baf654c628b160f.js",
              "total": 87.872000000000043,
              "scripting": 44.891000000000034,
              "scriptParseCompile": 9.439
            }
          ],
          "summary": {
            "wastedMs": 61.360000000000028
          },
          "headings": [
            {
              "key": "url",
              "itemType": "url",
              "text": "URL"
            },
            {
              "key": "total",
              "itemType": "ms",
              "text": "Total CPU Time",
              "granularity": 1
            },
            {
              "text": "Script Evaluation",
              "granularity": 1,
              "key": "scripting",
              "itemType": "ms"
            },
            {
              "text": "Script Parse",
              "granularity": 1,
              "key": "scriptParseCompile",
              "itemType": "ms"
            }
          ]
        },
        "numericValue": 61.360000000000028
      },
      "unminified-css": {
        "id": "unminified-css",
        "title": "Minify CSS",
        "description": "Minifying CSS files can reduce network payload sizes. [Learn more](https://web.dev/unminified-css).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "headings": [],
          "type": "opportunity",
          "items": [],
          "overallSavingsBytes": 0,
          "overallSavingsMs": 0
        },
        "numericValue": 0
      },
      "offscreen-images": {
        "id": "offscreen-images",
        "title": "Defer offscreen images",
        "description": "Consider lazy-loading offscreen and hidden images after all critical resources have finished loading to lower time to interactive. [Learn more](https://web.dev/offscreen-images).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "items": [],
          "type": "opportunity",
          "overallSavingsBytes": 0,
          "overallSavingsMs": 0,
          "headings": []
        },
        "warnings": [],
        "numericValue": 0
      },
      "network-server-latency": {
        "id": "network-server-latency",
        "title": "Server Backend Latencies",
        "description": "Server latencies can impact web performance. If the server latency of an origin is high, it's an indication the server is overloaded or has poor backend performance. [Learn more](https://hpbn.co/primer-on-web-performance/#analyzing-the-resource-waterfall).",
        "score": null,
        "scoreDisplayMode": "informative",
        "displayValue": "0 ms",
        "details": {
          "headings": [],
          "type": "table",
          "items": []
        },
        "numericValue": 0
      },
      "uses-responsive-images": {
        "id": "uses-responsive-images",
        "title": "Properly size images",
        "description": "Serve images that are appropriately-sized to save cellular data and improve load time. [Learn more](https://web.dev/uses-responsive-images).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "Potential savings of 12 KB",
        "details": {
          "headings": [
            {
              "key": "url",
              "valueType": "thumbnail"
            },
            {
              "key": "url",
              "valueType": "url",
              "label": "URL"
            },
            {
              "valueType": "bytes",
              "label": "Size",
              "key": "totalBytes"
            },
            {
              "valueType": "bytes",
              "label": "Potential Savings",
              "key": "wastedBytes"
            }
          ],
          "type": "opportunity",
          "items": [
            {
              "url": "https://rubylabs.am/assets/logos/rails-white-cd457b5d65f676aaac06707c5d1b2a741ebe67e3ebe586ab973aef28ec2b7ce1.png",
              "totalBytes": 4773,
              "wastedBytes": 3523,
              "wastedPercent": 73.80952380952381
            },
            {
              "url": "https://rubylabs.am/assets/logos/sass-white-03099be0d6b2db9bb2a09a683447beb413e88826c500489ae49c9b0fd560a4f6.png",
              "totalBytes": 3610,
              "wastedBytes": 3368,
              "wastedPercent": 93.301038062283737
            },
            {
              "url": "https://rubylabs.am/assets/logos/reactjs-white-d69d7da03f5945194754588f8194162fd7bd47f262a401ea6596c0dadae5a738.png",
              "totalBytes": 4405,
              "wastedBytes": 3184,
              "wastedPercent": 72.277091906721537
            },
            {
              "url": "https://rubylabs.am/assets/logos/js-white-73230efe4efc10eccd9a84bb20f11357271b3704f83d31d4ae25d597434fc22b.png",
              "totalBytes": 2876,
              "wastedBytes": 2619,
              "wastedPercent": 91.05263157894737
            }
          ],
          "overallSavingsBytes": 12694,
          "overallSavingsMs": 0
        },
        "warnings": [],
        "numericValue": 0
      },
      "unused-css-rules": {
        "id": "unused-css-rules",
        "title": "Remove unused CSS",
        "description": "Remove dead rules from stylesheets and defer the loading of CSS not used for above-the-fold content to reduce unnecessary bytes consumed by network activity. [Learn more](https://web.dev/unused-css-rules).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "Potential savings of 13 KB",
        "details": {
          "type": "opportunity",
          "items": [
            {
              "url": "https://rubylabs.am/assets/application-8c8461c6ea18b3ee66eb1a8d710080fb6ca08a013e30ac3ba68b41859319b0c1.css",
              "totalBytes": 14284,
              "wastedBytes": 13335,
              "wastedPercent": 93.35677128903454
            }
          ],
          "overallSavingsBytes": 13335,
          "overallSavingsMs": 0,
          "headings": [
            {
              "key": "url",
              "valueType": "url",
              "label": "URL"
            },
            {
              "key": "totalBytes",
              "valueType": "bytes",
              "label": "Size"
            },
            {
              "label": "Potential Savings",
              "key": "wastedBytes",
              "valueType": "bytes"
            }
          ]
        },
        "numericValue": 0
      },
      "speed-index": {
        "id": "speed-index",
        "title": "Speed Index",
        "description": "Speed Index shows how quickly the contents of a page are visibly populated. [Learn more](https://web.dev/speed-index).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.7 s",
        "numericValue": 658
      },
      "first-cpu-idle": {
        "id": "first-cpu-idle",
        "title": "First CPU Idle",
        "description": "First CPU Idle marks the first time at which the page's main thread is quiet enough to handle input.  [Learn more](https://web.dev/first-cpu-idle).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.7 s",
        "numericValue": 658
      },
      "total-byte-weight": {
        "id": "total-byte-weight",
        "title": "Avoids enormous network payloads",
        "description": "Large network payloads cost users real money and are highly correlated with long load times. [Learn more](https://web.dev/total-byte-weight).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "Total size was 340 KB",
        "details": {
          "headings": [
            {
              "text": "URL",
              "key": "url",
              "itemType": "url"
            },
            {
              "text": "Size",
              "key": "totalBytes",
              "itemType": "bytes"
            }
          ],
          "items": [
            {
              "url": "https://rubylabs.am/assets/application-ec865c57acb0588a6a34979772d6828d30904fb0f2008f0e7baf654c628b160f.js",
              "totalBytes": 97515
            },
            {
              "url": "https://rubylabs.am/assets/font-awesome/fa-solid-900-3d1080625d3030e88357b3ac9aa377dcec23f1b529c4ad03f7a9a435ccae04be.woff2",
              "totalBytes": 76240
            },
            {
              "totalBytes": 75848,
              "url": "https://rubylabs.am/assets/font-awesome/fa-brands-400-d3caf12591d194712facd10bca14f0a924edb59c24447a3fd994a48286db8843.woff2"
            },
            {
              "url": "https://www.googletagmanager.com/gtag/js?id=UA-141018178-1",
              "totalBytes": 29104
            },
            {
              "url": "https://www.google-analytics.com/analytics.js",
              "totalBytes": 18519
            },
            {
              "url": "https://rubylabs.am/assets/application-8c8461c6ea18b3ee66eb1a8d710080fb6ca08a013e30ac3ba68b41859319b0c1.css",
              "totalBytes": 14284
            },
            {
              "url": "https://rubylabs.am/assets/rl/red-160x130-569c48171f3b58bdb104bc8285e01f1ef44bbaa13550b58ad6b94c9fb0210ef4.png",
              "totalBytes": 7606
            },
            {
              "url": "https://rubylabs.am/assets/logos/rails-white-cd457b5d65f676aaac06707c5d1b2a741ebe67e3ebe586ab973aef28ec2b7ce1.png",
              "totalBytes": 5269
            },
            {
              "url": "https://rubylabs.am/assets/logos/reactjs-white-d69d7da03f5945194754588f8194162fd7bd47f262a401ea6596c0dadae5a738.png",
              "totalBytes": 4901
            },
            {
              "url": "https://rubylabs.am/assets/logos/sass-white-03099be0d6b2db9bb2a09a683447beb413e88826c500489ae49c9b0fd560a4f6.png",
              "totalBytes": 4106
            }
          ],
          "type": "table"
        },
        "numericValue": 347852
      },
      "mainthread-work-breakdown": {
        "id": "mainthread-work-breakdown",
        "title": "Minimizes main-thread work",
        "description": "Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this. [Learn more](https://web.dev/mainthread-work-breakdown)",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.3 s",
        "details": {
          "type": "table",
          "items": [
            {
              "group": "scriptEvaluation",
              "duration": 118.02600000000015,
              "groupLabel": "Script Evaluation"
            },
            {
              "group": "other",
              "duration": 66.035000000000025,
              "groupLabel": "Other"
            },
            {
              "group": "styleLayout",
              "duration": 40.022,
              "groupLabel": "Style & Layout"
            },
            {
              "group": "scriptParseCompile",
              "duration": 16.87,
              "groupLabel": "Script Parsing & Compilation"
            },
            {
              "group": "parseHTML",
              "duration": 13.800000000000002,
              "groupLabel": "Parse HTML & CSS"
            },
            {
              "groupLabel": "Rendering",
              "group": "paintCompositeRender",
              "duration": 12.393000000000004
            }
          ],
          "headings": [
            {
              "text": "Category",
              "key": "groupLabel",
              "itemType": "text"
            },
            {
              "text": "Time Spent",
              "granularity": 1,
              "key": "duration",
              "itemType": "ms"
            }
          ]
        },
        "numericValue": 267.14600000000019
      },
      "first-contentful-paint": {
        "id": "first-contentful-paint",
        "title": "First Contentful Paint",
        "description": "First Contentful Paint marks the time at which the first text or image is painted. [Learn more](https://web.dev/first-contentful-paint).",
        "score": 0.98,
        "scoreDisplayMode": "numeric",
        "displayValue": "0.7 s",
        "numericValue": 658
      },
      "uses-webp-images": {
        "id": "uses-webp-images",
        "title": "Serve images in next-gen formats",
        "description": "Image formats like JPEG 2000, JPEG XR, and WebP often provide better compression than PNG or JPEG, which means faster downloads and less data consumption. [Learn more](https://web.dev/uses-webp-images).",
        "score": 1,
        "scoreDisplayMode": "numeric",
        "details": {
          "headings": [],
          "type": "opportunity",
          "items": [],
          "overallSavingsBytes": 0,
          "overallSavingsMs": 0
        },
        "warnings": [],
        "numericValue": 0
      },
      "diagnostics": {
        "id": "diagnostics",
        "title": "Diagnostics",
        "description": "Collection of useful page vitals.",
        "score": null,
        "scoreDisplayMode": "informative",
        "details": {
          "type": "debugdata",
          "items": [
            {
              "numTasks": 231,
              "numTasksOver10ms": 5,
              "rtt": 0.0017619417659501862,
              "numFonts": 2,
              "maxRtt": 0.0017619417659501862,
              "numTasksOver500ms": 0,
              "maxServerLatency": null,
              "numScripts": 4,
              "numStylesheets": 1,
              "numTasksOver100ms": 0,
              "throughput": 27552233322.388615,
              "numTasksOver25ms": 3,
              "numTasksOver50ms": 1,
              "numRequests": 18,
              "totalTaskTime": 267.14599999999984,
              "mainDocumentTransferSize": 3226,
              "totalByteWeight": 347852
            }
          ]
        }
      }
    },
    "categories": {
      "performance": {
        "id": "performance",
        "title": "Performance",
        "score": 0.99,
        "auditRefs": [
          {
            "id": "first-contentful-paint",
            "weight": 3,
            "group": "metrics"
          },
          {
            "id": "first-meaningful-paint",
            "weight": 1,
            "group": "metrics"
          },
          {
            "id": "speed-index",
            "weight": 4,
            "group": "metrics"
          },
          {
            "id": "interactive",
            "weight": 5,
            "group": "metrics"
          },
          {
            "id": "first-cpu-idle",
            "weight": 2,
            "group": "metrics"
          },
          {
            "id": "max-potential-fid",
            "weight": 0,
            "group": "metrics"
          },
          {
            "id": "estimated-input-latency",
            "weight": 0
          },
          {
            "id": "total-blocking-time",
            "weight": 0
          },
          {
            "id": "render-blocking-resources",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "uses-responsive-images",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "offscreen-images",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "unminified-css",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "unminified-javascript",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "unused-css-rules",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "uses-optimized-images",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "uses-webp-images",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "uses-text-compression",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "uses-rel-preconnect",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "time-to-first-byte",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "redirects",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "uses-rel-preload",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "efficient-animated-content",
            "weight": 0,
            "group": "load-opportunities"
          },
          {
            "id": "total-byte-weight",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "uses-long-cache-ttl",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "dom-size",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "critical-request-chains",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "user-timings",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "bootup-time",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "mainthread-work-breakdown",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "font-display",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "performance-budget",
            "weight": 0,
            "group": "budgets"
          },
          {
            "id": "resource-summary",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "third-party-summary",
            "weight": 0,
            "group": "diagnostics"
          },
          {
            "id": "network-requests",
            "weight": 0
          },
          {
            "id": "network-rtt",
            "weight": 0
          },
          {
            "id": "network-server-latency",
            "weight": 0
          },
          {
            "id": "main-thread-tasks",
            "weight": 0
          },
          {
            "id": "diagnostics",
            "weight": 0
          },
          {
            "id": "metrics",
            "weight": 0
          },
          {
            "id": "screenshot-thumbnails",
            "weight": 0
          },
          {
            "id": "final-screenshot",
            "weight": 0
          }
        ]
      }
    },
    "categoryGroups": {
      "metrics": {
        "title": "Metrics"
      },
      "load-opportunities": {
        "title": "Opportunities",
        "description": "These suggestions can help your page load faster. They don't [directly affect](https://github.com/GoogleChrome/lighthouse/blob/d2ec9ffbb21de9ad1a0f86ed24575eda32c796f0/docs/scoring.md#how-are-the-scores-weighted) the Performance score."
      },
      "pwa-installable": {
        "title": "Installable"
      },
      "seo-mobile": {
        "title": "Mobile Friendly",
        "description": "Make sure your pages are mobile friendly so users don’t have to pinch or zoom in order to read the content pages. [Learn more](https://developers.google.com/search/mobile-sites/)."
      },
      "diagnostics": {
        "title": "Diagnostics",
        "description": "More information about the performance of your application. These numbers don't [directly affect](https://github.com/GoogleChrome/lighthouse/blob/d2ec9ffbb21de9ad1a0f86ed24575eda32c796f0/docs/scoring.md#how-are-the-scores-weighted) the Performance score."
      },
      "a11y-best-practices": {
        "title": "Best practices",
        "description": "These items highlight common accessibility best practices."
      },
      "a11y-color-contrast": {
        "title": "Contrast",
        "description": "These are opportunities to improve the legibility of your content."
      },
      "seo-crawl": {
        "title": "Crawling and Indexing",
        "description": "To appear in search results, crawlers need access to your app."
      },
      "pwa-optimized": {
        "title": "PWA Optimized"
      },
      "seo-content": {
        "title": "Content Best Practices",
        "description": "Format your HTML in a way that enables crawlers to better understand your app’s content."
      },
      "a11y-navigation": {
        "title": "Navigation",
        "description": "These are opportunities to improve keyboard navigation in your application."
      },
      "pwa-fast-reliable": {
        "title": "Fast and reliable"
      },
      "a11y-aria": {
        "title": "ARIA",
        "description": "These are opportunities to improve the usage of ARIA in your application which may enhance the experience for users of assistive technology, like a screen reader."
      },
      "a11y-audio-video": {
        "title": "Audio and video",
        "description": "These are opportunities to provide alternative content for audio and video. This may improve the experience for users with hearing or vision impairments."
      },
      "a11y-language": {
        "title": "Internationalization and localization",
        "description": "These are opportunities to improve the interpretation of your content by users in different locales."
      },
      "a11y-tables-lists": {
        "title": "Tables and lists",
        "description": "These are opportunities to to improve the experience of reading tabular or list data using assistive technology, like a screen reader."
      },
      "a11y-names-labels": {
        "title": "Names and labels",
        "description": "These are opportunities to improve the semantics of the controls in your application. This may enhance the experience for users of assistive technology, like a screen reader."
      },
      "budgets": {
        "title": "Budgets",
        "description": "Performance budgets set standards for the performance of your site."
      }
    },
    "timing": {
      "total": 4329.18
    },
    "i18n": {
      "rendererFormattedStrings": {
        "varianceDisclaimer": "Values are estimated and may vary. The performance score is [based only on these metrics](https://github.com/GoogleChrome/lighthouse/blob/d2ec9ffbb21de9ad1a0f86ed24575eda32c796f0/docs/scoring.md#how-are-the-scores-weighted).",
        "opportunityResourceColumnLabel": "Opportunity",
        "opportunitySavingsColumnLabel": "Estimated Savings",
        "errorMissingAuditInfo": "Report error: no audit information",
        "errorLabel": "Error!",
        "warningHeader": "Warnings: ",
        "auditGroupExpandTooltip": "Show audits",
        "passedAuditsGroupTitle": "Passed audits",
        "notApplicableAuditsGroupTitle": "Not applicable",
        "manualAuditsGroupTitle": "Additional items to manually check",
        "toplevelWarningsMessage": "There were issues affecting this run of Lighthouse:",
        "crcLongestDurationLabel": "Maximum critical path latency:",
        "crcInitialNavigation": "Initial Navigation",
        "lsPerformanceCategoryDescription": "[Lighthouse](https://developers.google.com/web/tools/lighthouse/) analysis of the current page on an emulated mobile network. Values are estimated and may vary.",
        "labDataTitle": "Lab Data"
      }
    }
  },
  "analysisUTCTimestamp": "2020-02-07T18:51:18.077Z"
}

    http_version: null
  recorded_at: Fri, 07 Feb 2020 18:51:23 GMT
recorded_with: VCR 5.1.0
